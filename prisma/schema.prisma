
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  name           String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  email          String
  emailVerified  Boolean
  image          String?
  chessCompleted Boolean        @default(false)
  sessions       Session[]
  accounts       Account[]
  messages       Message[]
  typingStatus   TypingStatus?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Message {
  id         String    @id @default(uuid())
  content    String    @db.Text
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDeleted  Boolean   @default(false)
  isEdited   Boolean   @default(false)
  replyToId  String?
  replyTo    Message?  @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies    Message[] @relation("MessageReplies")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([createdAt])
  @@index([userId])
  @@index([replyToId])
  @@map("message")
}

model TypingStatus {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isTyping  Boolean  @default(false)
  updatedAt DateTime @updatedAt

  @@map("typing_status")
}
